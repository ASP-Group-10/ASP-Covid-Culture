CASchools$score = (CASchools$read + CASchools$math)/2
stargazer(CASchools, type="text")
model_1 = lm(score ~ teachers, data=CASchools)
model_2 = lm(score ~ teachers + lunch, data=CASchools)
model_3 = lm(score ~ teachers + lunch + computer, data=CASchools)
model_4 = lm(score ~ teachers + lunch + computer + income, data=CASchools)
stargazer(model_1, model_2, model_3, model_4, type="text")
# lunch explain the variability in score the most out of the used variables
model_1 = lm(score ~ lunch, data=CASchools)
stargazer(model_1, type="text") # R2=0.755
# check for nonlinear relationship
library(tidyverse)
scatter = ggplot(CASchools, aes(income,score))
scatter + geom_point() + geom_smooth(method = "lm", colour="Red") + labs(x="income", y="score")
scatter + geom_point() + geom_smooth() + labs(x="income", y="score")
quadratic_model = lm(score ~ income + I(income^2), data=CASchools)
stargazer(quadratic_model, type="text")
?I()
# what happens to the fit if we have the supposedly wrong functional form?
linear_model = lm(score ~ income, data=CASchools)
stargazer(linear_model, quadratic_model, type="text")
scatter = ggplot(CASchools, aes(lunch,score))
scatter + geom_point() + geom_smooth(method = "lm", colour="Red") + labs(x="lunch", y="score")
scatter + geom_point() + geom_smooth() + labs(x="lunch", y="score")
linear_model = lm(score ~ lunch, data=CASchools)
quadratic_model = lm(score ~ lunch + I(lunch^2), data=CASchools)
stargazer(linear_model, quadratic_model, type="text")
##############################
### Inference and P-Values ###
##############################
# p-values and statistical significance:
# which coefficient is significant and which not?
full_model = lm(score ~ teachers + lunch + computer + income + expenditure + calworks + students, data=CASchools)
summary(full_model)
stargazer(full_model, type="text")
# nr of observations and p-values
CASchools2 = CASchools
DoubleData = rbind(CASchools, CASchools2)
double_model = lm(score ~ lunch + I(lunch^2), data=DoubleData)
stargazer(quadratic_model, double_model, type="text")
#######################
### OLS Assumptions ###
#######################
# Normality test
income_hist = ggplot(CASchools, aes(income))
income_hist + geom_histogram() + labs(x="income", y="Frequency")
qqplot.income_hist = qplot(sample = CASchools$income, stat="qq")
qqplot.income_hist
shapiro.test(CASchools$income)
# Normality test remedy transformations (log, sqrt, inverse)
# log
CASchools$ln_income = log(CASchools$income)
ln_income_hist = ggplot(CASchools, aes(ln_income))
ln_income_hist + geom_histogram() + labs(x="ln_income", y="Frequency")
qqplot.ln_income_hist = qplot(sample = CASchools$ln_income, stat="qq")
qqplot.ln_income_hist
shapiro.test(CASchools$ln_income)
# sqrt
CASchools$sqrt_income = sqrt(CASchools$income)
sqrt_income_hist = ggplot(CASchools, aes(sqrt_income))
sqrt_income_hist + geom_histogram() + labs(x="ln_income", y="Frequency")
qqplot.sqrt_income_hist = qplot(sample = CASchools$sqrt_income, stat="qq")
qqplot.sqrt_income_hist
shapiro.test(CASchools$sqrt_income)
# inverse
CASchools$inv_income = 1/(CASchools$income)
inv_income_hist = ggplot(CASchools, aes(inv_income))
inv_income_hist + geom_histogram() + labs(x="ln_income", y="Frequency")
qqplot.inv_income_hist = qplot(sample = CASchools$inv_income, stat="qq")
qqplot.inv_income_hist
shapiro.test(CASchools$inv_income)
# Heteroskedasticity of error terms
# Example 1
linear_model = lm(score ~ income, data=CASchools)
par(mfrow=c(2,2))
plot(linear_model)
lmtest::bgtest(linear_model)
lmtest::bptest(linear_model)
lmtest::bptest(linear_model)
plot(linear_model)
linear_model = lm(score ~ income, data=CASchools)
par(mfrow=c(2,2))
plot(linear_model)
linear_model = lm(score ~ income, data=CASchools)
par(mfrow=c(2,2))
plot(linear_model)
lmtest::bptest(linear_model)
linear_model = lm(score ~ lunch, data=CASchools)
par(mfrow=c(2,2))
plot(linear_model)
lmtest::bptest(linear_model)
stargazer(full_model, type="text")
seBasic = sqrt( diag ( vcov (full_model)))
seWhite = sqrt( diag ( vcovHV (full_model, type="HC0")))
seWhite = sqrt( diag ( vcovHC (full_model, type="HC0")))
seClust = sqrt( diag ( vcovHC (full_model, cluster="county")))
# table with stargazer
stargazer(full_model, full_model, full_model, se=list(seBasic, seWhite, seClust), type="text")
# creating artificial multicollinearity
CASchools$incomeX2 = CASchools$income*2
full_model = lm(score ~ teachers + lunch + computer + income + incomeX2 + expenditure + calworks + students, data=CASchools)
stargazer(full_model, type="text")
# creating artificial multicollinearity
CASchools$incomeX2 = (CASchools$income)*2
full_model = lm(score ~ teachers + lunch + computer + income + incomeX2 + expenditure + calworks + students, data=CASchools)
stargazer(full_model, type="text")
# imperfect multicollinearity
full_model = lm(score ~ teachers + lunch + computer + income + expenditure + calworks + students, data=CASchools)
vif = vif(full_model)
vif
stargazer(vif, type="text")
full_model_2 = lm(score ~ teachers + lunch + computer + income + expenditure + calworks, data=CASchools)
vif2 = vif(full_model_2)
stargazer(vif2, type="text")
CASchools$StudTeachRatio = CASchools$students/CASchools$teachers
full_model = lm(score ~ size + lunch + computer + income + expenditure + calworks, data=CASchools)
full_model_3 = lm(score ~ size + lunch + computer + income + expenditure + calworks, data=CASchools)
vif3 = vif(full_model_3)
stargazer(vif2, type="text")
stargazer(vif3, type="text")
stargazer(full_model_3, type='text')
setwd('C:\Users\marto\OneDrive\Asztali gép\Projects\MSc\Block 1\Advanced Stats & Programming\ASP-Covid-Culture')
setwd("C:\Users\marto\OneDrive\'Asztali gép'\Projects\MSc\Block 1\'Advanced Stats & Programming'\ASP-Covid-Culture")
setwd(r"C:\Users\marto\OneDrive\'Asztali gép'\Projects\MSc\Block 1\'Advanced Stats & Programming'\ASP-Covid-Culture")
setwd(u"C:\Users\marto\OneDrive\'Asztali gép'\Projects\MSc\Block 1\'Advanced Stats & Programming'\ASP-Covid-Culture")
setwd("C:/Users/marto/OneDrive/'Asztali gép'/Projects/MSc/Block 1/'Advanced Stats & Programming'/ASP-Covid-Culture")
setwd("C:/Users/marto/OneDrive/")
setwd("C:/Users/marto/OneDrive/Asztali gép/Projects/MSc/Block 1/Advanced Stats & Programming/ASP-Covid-Culture")
owid = read.csv('./data/owid-covid-data.csv')
head(owid)
hof = read.csv('./data/raw_6_dimensions.csv')
head(how)
head(hof)
help(read.csv)
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
head(hof)
owid$iso_code
tail(owid$iso_code)
help(read.csv)
eu_countries = c('AT', 'BE', 'HR', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE',
'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB')
length(eu_countries)
# packages
require(tidyverse)
owid %>%
filter(iso_code %in% eu_countries)
df = owid %>%
filter(iso_code %in% eu_countries)
df
filter(owid, iso_code %in% eu_countries)
filter(owid, iso_code == 'HU')
owid$iso_code
describe(owid)
summarise(owid)
head(owid)
View(owid)
owid[owid$iso_code == 'HU']
head(owid[owid$iso_code == 'HU'])
head(owid[owid$iso_code == 'HUN'])
head(owid[owid$iso_code == 'HUN'])
View(owid)
owid = read.csv('./data/owid-covid-data.csv')
head(owid[owid$iso_code == 'HUN'])
owid[owid$iso_code == 'HUN']
filter(owid, iso_code == 'HUN')
eu_countries = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SBN', 'ESP', 'SWE')
df = owid %>%
filter(iso_code %in% eu_countries)
head(df)
sapply(df, function(x) length(unique(x)))
unique(owid$iso_code)
eu_countries[which(!eu_countries %in% unique(owid$iso_code))]
eu_countries = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries[which(!eu_countries %in% unique(owid$iso_code))]
owid_eu = owid %>%
filter(iso_code %in% eu_countries)
n_distinct(owid_eu$iso_code)
length(eu_countries)
print("Error: nr. of eu countries (" + length(eu_countries))
print("Error: nr. of eu countries (", length(eu_countries))
print(paste("Error: nr. of eu countries (", length(eu_countries)))
cat("Error: nr. of eu countries (", length(eu_countries))
cat("Error: nr. of eu countries (",length(eu_countries))
cat("Error: nr. of eu countries (",length(eu_countries), ")")
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ")")
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
eu_countries = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
owid_eu = owid %>%
filter(iso_code %in% eu_countries)
if (length(eu_countries) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
}
# packages
require(tidyverse)
#################
### Load Data ###
#################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
eu_countries = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
owid_eu = owid %>%
filter(iso_code %in% eu_countries)
if (length(eu_countries) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
}
hof
hof_eu = hof %>%
filter(ctr %in% eu_countries)
View(hof_eu)
View(hof)
# packages
require(tidyverse)
###########################
###### Data Cleaning ######
###########################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
# filter to eu countries
eu_iso = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries = c('Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France',
'Germany','Greece','Hungary','Ireland','Italy','Latvia','Lithuania','Luxembourg','Malta',
'Netherlands','Poland','Portugal','Romania','Slovakia','Slovenia','Spain','Sweden')
owid_eu = owid %>%
filter(iso_code %in% eu_iso)
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
}
hof_eu = hof %>%
filter(ctr %in% eu_countries)
hof_eu = hof %>%
filter(country %in% eu_countries)
View(hof_eu)
eu_countries[which(!eu_countries %in% hof_eu$country)]
cat("missing",eu_countries[which(!eu_countries %in% hof_eu$country)])
View(hof)
# packages
require(tidyverse)
###########################
###### Data Cleaning ######
###########################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
# filter to eu countries
eu_iso = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries = c('Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Rep','Denmark','Estonia','Finland','France',
'Germany','Greece','Hungary','Ireland','Italy','Latvia','Lithuania','Luxembourg','Malta',
'Netherlands','Poland','Portugal','Romania','Slovak Rep','Slovenia','Spain','Sweden')
owid_eu = owid %>%
filter(iso_code %in% eu_iso)
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
cat("Missing value(s):", eu_iso[which(!eu_iso %in% owid_eu$iso_code)])
}
hof_eu = hof %>%
filter(country %in% eu_countries)
cat("missing",eu_countries[which(!eu_countries %in% hof_eu$country)])
# packages
require(tidyverse)
###########################
###### Data Cleaning ######
###########################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
# filter to eu countries
eu_iso = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries = c('Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Rep','Denmark','Estonia','Finland','France',
'Germany','Greece','Hungary','Ireland','Italy','Latvia','Lithuania','Luxembourg','Malta',
'Netherlands','Poland','Portugal','Romania','Slovak Rep','Slovenia','Spain','Sweden')
owid_eu = owid %>%
filter(iso_code %in% eu_iso)
hof_eu = hof %>%
filter(country %in% eu_countries)
# sanity check
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
cat("Missing value(s):", eu_iso[which(!eu_iso %in% owid_eu$iso_code)])
}
else if (length(eu_countries) != n_distinct(hof_eu$country)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(hof_eu$country), ").")
cat("Missing value(s):", eu_iso[which(!eu_countries %in% hof_eu$country)])
# packages
require(tidyverse)
###########################
###### Data Cleaning ######
###########################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
# filter to eu countries
eu_iso = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries = c('Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Rep','Denmark','Estonia','Finland','France',
'Germany','Greece','Hungary','Ireland','Italy','Latvia','Lithuania','Luxembourg','Malta',
'Netherlands','Poland','Portugal','Romania','Slovak Rep','Slovenia','Spain','Sweden')
owid_eu = owid %>%
filter(iso_code %in% eu_iso)
hof_eu = hof %>%
filter(country %in% eu_countries)
# sanity check
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
cat("Missing value(s):", eu_iso[which(!eu_iso %in% owid_eu$iso_code)])
}
else if (length(eu_countries) != n_distinct(hof_eu$country)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(hof_eu$country), ").")
cat("Missing value(s):", eu_iso[which(!eu_countries %in% hof_eu$country)])
}
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
cat("Missing value(s):", eu_iso[which(!eu_iso %in% owid_eu$iso_code)])
} else if (length(eu_countries) != n_distinct(hof_eu$country)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(hof_eu$country), ").")
cat("Missing value(s):", eu_iso[which(!eu_countries %in% hof_eu$country)])
}
# packages
require(tidyverse)
###########################
###### Data Cleaning ######
###########################
owid = read.csv('./data/owid-covid-data.csv')
hof = read.csv('./data/raw_6_dimensions.csv', sep=';')
# filter to eu countries
eu_iso = c('AUT', 'BEL', 'HRV', 'BGR', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL',
'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
eu_countries = c('Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Rep','Denmark','Estonia','Finland','France',
'Germany','Greece','Hungary','Ireland','Italy','Latvia','Lithuania','Luxembourg','Malta',
'Netherlands','Poland','Portugal','Romania','Slovak Rep','Slovenia','Spain','Sweden')
owid_eu = owid %>%
filter(iso_code %in% eu_iso)
hof_eu = hof %>%
filter(country %in% eu_countries)
# sanity check
if (length(eu_iso) != n_distinct(owid_eu$iso_code)) {
cat("Error: nr. of eu countries (",length(eu_iso), ") does not equal nr. of countries found in owid df (", n_distinct(owid_eu$iso_code), ").")
cat("Missing value(s):", eu_iso[which(!eu_iso %in% owid_eu$iso_code)])
} else if (length(eu_countries) != n_distinct(hof_eu$country)) {
cat("Error: nr. of eu countries (",length(eu_countries), ") does not equal nr. of countries found in owid df (", n_distinct(hof_eu$country), ").")
cat("Missing value(s):", eu_iso[which(!eu_countries %in% hof_eu$country)])
}
vars = c('new_cases', 'hosp_patients', 'stringency_index', 'excess_mortality')
owid_eu[vars]
View(owid_eu)
owid_eu$date
as.Date(owid_eu$date)
class(owid_eu$date)
class(as.Date(owid_eu$date))
# typecasting
owid_eu$date = as.Date(owid_eu$date)
owid_eu %>%
filter(date > "2021-02-01" & date < "2021-05-21")
owid_eu %>%
filter(date >= "2021-02-01" & date =< "2021-05-21")
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21")
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21") %>%
group_by(iso_code)
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21") %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases))
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21") %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index),
excess_mortality = mean(excess_mortality))
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21") %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
owid_eu %>%
filter(date >= "2021-02-01" & date <= "2021-05-21") %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
#################################################################
# !!! CHANGE excess_mortality MEASURE TO TOTAL INSTEAD OF % !!! #
#################################################################
start_date = "2021-02-01"
end_date = "2021-05-21"
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
df
View(df)
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases, na.rm=TRUE),
hosp_patients = sum(hosp_patients, na.rm=TRUE),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
View(df)
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
owid_eu[owid_eu$iso_code == "FRA"]
owid_eu[owid_eu$iso_code = "FRA"]
owid_eu[owid_eu$iso_code %in% "FRA"]
filter(owid_eu, iso_code == "FRA")
View(owid_eu)
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases, na.rm=TRUE),
hosp_patients = sum(hosp_patients),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
df = owid_eu %>%
filter(date >= start_date & date <= end_date) %>%
group_by(iso_code) %>%
summarise(new_cases = sum(new_cases, na.rm=TRUE),
hosp_patients = sum(hosp_patients, na.rm=TRUE),
stringency_index = mean(stringency_index, na.rm=TRUE),
excess_mortality = mean(excess_mortality, na.rm=TRUE))
hof_eu
View(hof_eu)
View(df)
print(row)
hof_eu[row]
hof_eu[row,]
for (row in 1:nrow(hof_eu)) {
hof_eu[row,]
}
for (row in 1:nrow(hof_eu)) {
hof_eu[row,]
}
print(hof_eu[row,])
for (row in 1:nrow(hof_eu)) {
print(hof_eu[row,])
}
hof_eu[row,]
hof_eu[row,]$ctr
list(eu_countries, eu_iso)
row
eu_countries[row]
View(hof_eu)
hof_eu$ctr[hof_eu$country == "Austria"]
for (i in length(eu_countries)) {
country = eu_countries[i]
iso = eu_iso[i]
hof_eu$ctr[hof_eu$country == country] <- iso
print(hof_eu[row,])
}
hof_eu$ctr[hof_eu$country == country] <- iso
View(hof_eu)
cat(country,iso)
for (i in length(eu_countries)) {
country = eu_countries[i]
iso = eu_iso[i]
hof_eu$ctr[hof_eu$country == country] <- iso
cat(country,iso)
}
for (i in length(eu_countries)) {
country = eu_countries[i]
iso = eu_iso[i]
hof_eu$ctr[hof_eu$country == country] <- iso
cat(country,iso)
}
for (i in 1:nrow(hof_eu)) {
country = eu_countries[i]
iso = eu_iso[i]
hof_eu$ctr[hof_eu$country == country] <- iso
cat(country,iso)
}
# join on iso codes
final_df = df %>% join(hof_eu)
# join on iso codes
final_df = df %>% inner_join(hof_eu, by = c("iso_code" = "ctr"))
View(final_df)
subset(hof_eu, select = -country )
hof_eu = subset(hof_eu, select = -country)
# join on iso codes
final_df = df %>% inner_join(hof_eu, by = c("iso_code" = "ctr"))
# write csv
write.csv(final_df, "./data/final_df.csv", row.names=FALSE)
lm(excess_mortality ~ pdi, data=final_df)
model = lm(excess_mortality ~ new_cases + hosp_patients + stringency_index + pdi + idv + mas + uai + itowvs + ivr, data=final_df)
model = lm(excess_mortality ~ new_cases + hosp_patients + stringency_index + pdi + idv + mas + uai + ltowvs + ivr, data=final_df)
require(stargazer)
stargazer(model, type="text")
model = lm(excess_mortality ~ new_cases + hosp_patients + stringency_index, data=final_df)
stargazer(model, type="text")
